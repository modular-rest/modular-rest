declare const _exports: {
    defineFunction: typeof defineFunction;
    TypeCasters: {
        ObjectId: import("mongoose").Types.ObjectIdConstructor;
        Date: (dateValue: any) => Date;
    };
    validator: typeof validator;
    reply: typeof reply;
    paginator: typeof paginator;
    getCollection: typeof getCollection;
    getFile: (fileId: string) => Promise<any>;
    getFileLink: (fileId: string) => Promise<any>;
    getFilePath: (fileId: any) => Promise<string>;
    removeFile: (fileId: string) => Promise<any>;
    storeFile: ({ file, ownerId, tag, removeFileAfterStore }: {
        file: {
            path: string;
            type: string;
            name: string;
            size: number;
        };
        ownerId: string;
        tag: string;
        removeFileAfterStore?: boolean;
    }) => Promise<any>;
    middleware: typeof middleware;
    userManager: {
        tempIds: {};
        setCustomVerificationCodeGeneratorMethod(generatorMethod: Function): void;
        verificationCodeGeneratorMethod: Function;
        generateVerificationCode(id: string, idType: any): Promise<import("./class/user")>;
        getUserById(id: string): Promise<import("./class/user")>;
        getUserByIdentity(id: string, idType: string): Promise<import("./class/user")>;
        getUserByToken(token: string): Promise<import("./class/user")>;
        isCodeValid(id: string, code: string): boolean;
        loginUser(id?: string, idType?: string, password?: string): Promise<string>;
        issueTokenForUser(email: string): Promise<string>;
        loginAnonymous(): Promise<string>;
        registerTemporaryID(id: string, type: string, code: string): void;
        submitPasswordForTemporaryID(id: string, password: string, code: string): Promise<boolean>;
        changePasswordForTemporaryID(id: string, password: string, code: string): Promise<boolean>;
        registerUser(detail: any): Promise<string>;
        changePassword(query: any, newPass: string): Promise<void>;
    };
    AccessDefinition: typeof SecurityClass.AccessDefinition;
    Permission: typeof SecurityClass.Permission;
    PermissionTypes: typeof SecurityClass.PermissionTypes;
    PermissionGroup: typeof SecurityClass.PermissionGroup;
    AccessTypes: typeof SecurityClass.AccessTypes;
    createRest: typeof createRest;
    CollectionDefinition: typeof CollectionDefinition;
    Schemas: {
        file: Schema<import("mongoose").Document<any, any, any>, import("mongoose").Model<import("mongoose").Document<any, any, any>, any, any>, undefined, {}>;
    };
    Schema: typeof Schema;
    DatabaseTrigger: typeof DatabaseTrigger;
    CmsTrigger: typeof CmsTrigger;
};
export = _exports;
import { defineFunction } from "./services/functions/service";
import validator = require("./class/validator");
import reply = require("./class/reply");
import paginator = require("./class/paginator");
import { getCollection } from "./services/data_provider/service";
import middleware = require("./middlewares");
import SecurityClass = require("./class/security");
import createRest = require("./application");
import CollectionDefinition = require("./class/collection_definition");
import Schema_1 = require("mongoose");
import Schema = Schema_1.Schema;
import DatabaseTrigger = require("./class/database_trigger");
import CmsTrigger = require("./class/cms_trigger");
